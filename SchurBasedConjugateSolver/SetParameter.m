function [meshType, nV, numDecompose, fileName, epsArap, epsSchur] = SetParameter()
%
%   this function sets up global parameters, such as mesh size, decomposition number and so on
%
%   INPUT:  
%
%   OUTPUT: meshType - the type of the triangulation and the manner to obtain it
%           nV - mesh size
%           numDecompose - decomposition number
%           fileName - name of obj file
%           epsArap - the convergence error of the local-global method
%           epsSchur - the convergence error of the conjugate method
                   

meshType = listdlg('PromptString', 'Triangulation type', ...
                   'SelectionMode','single', ...
                   'liststring', {'Structured triangulation', ...
                                  'Unstructured triangulation generated by delaunay method', ...
                                  'Unstructured triangulation generated by reading from a file'});


switch meshType
    case {1, 2}
        m1 = listdlg('PromptString', 'Mesh size', 'SelectionMode','single', ...
                     'liststring', {'289', '1089', '4225', '16641', '66049', '263169'}) + 3;
        nV = (2^m1 + 1)^2;
        fileName = 'None';
    case 3
        fileName = listdlg('PromptString', 'Mesh file', ...
                           'SelectionMode','single', ...
                           'liststring', {'ball', 'bunny', 'camelhead', 'cat', 'david', 'face'});
        switch fileName
            case 1
                [V, ~, ~, ~] = readObj('NewtonParam/ball');
            case 2
                [V, ~, ~, ~] = readObj('NewtonParam/bunny');
            case 3
                [V, ~, ~, ~] = readObj('NewtonParam/camelhead_slim');
            case 4
                [V, ~, ~, ~] = readObj('NewtonParam/cat');
            case 5
                [V, ~, ~, ~] = readObj('NewtonParam/david');
            case 6
                [V, ~, ~, ~] = readObj('NewtonParam/face');
            otherwise
                quit(1);
        end
        nV = size(V, 1);
    otherwise
        quit(1);
end


if nV <= 100
    fprintf('No need to apply decomposition method./n');
    quit(1);
elseif nV <= 2000
	m2 = listdlg('PromptString','Decomposition number','SelectionMode','single','liststring', {'4'});
elseif nV <= 4000
    m2 = listdlg('PromptString','Decomposition number','SelectionMode','single','liststring', {'4','8'});
elseif nV <= 8000
    m2 = listdlg('PromptString','Decomposition number','SelectionMode','single','liststring', {'4','8','16'});
elseif nV <= 16000
    m2 = listdlg('PromptString','Decomposition number','SelectionMode','single','liststring', {'4','8','16','32'});
elseif nV <= 32000
    m2 = listdlg('PromptString','Decomposition number','SelectionMode','single','liststring', {'4','8','16','32','64'});
elseif nV <= 64000
    m2 = listdlg('PromptString','Decomposition number','SelectionMode','single','liststring', {'4','8','16','32','64','128'});
elseif nV <= 128000
    m2 = listdlg('PromptString','Decomposition number','SelectionMode','single','liststring', {'4','8','16','32','64','128','256'});
elseif nV <= 256000
    m2 = listdlg('PromptString','Decomposition number','SelectionMode','single','liststring', {'4','8','16','32','64','128','256','512'});
else
    m2 = listdlg('PromptString','Decomposition number','SelectionMode','single','liststring', {'4','8','16','32','64','128','256','512','1024'});
end
numDecompose = 2^(m2 + 1);


eps = floor(1.5 * log10(1.0 / nV));
epsArap = 10^eps;
% epsSchur = 10^eps;
% epsSchur = 10^(eps / 2);
epsSchur = 1e-1;


end